"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from dotenv import load_dotenv

load_dotenv()

from pathlib import Path
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DOMAIN = os.getenv("DOMAIN")
def _get_env_list(var_name: str) -> list[str]:
    """
    Retorna uma lista de strings a partir de uma variável de ambiente
    separada por vírgulas, removendo espaços em branco e itens vazios.
    """
    return [
        item.strip() 
        for item in os.getenv(var_name, "").split(",") 
        if item and item.strip()
    ]
    
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^+2@47@c*v$d!-se!&o(nk&e$@y7w6n&yspwzk&3qb_+(znk*6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG") == "True"

ALLOWED_HOSTS = _get_env_list("ALLOWED_HOSTS")

_origins = _get_env_list("ALLOWED_HOSTS")
CORS_ALLOWED_ORIGINS = [
    f"{scheme}://{origin}"
    for origin in _origins
    for scheme in ("http", "https")
]
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS.copy()

AUTH_USER_MODEL = 'accounts.User'
LOGIN_REDIRECT_URL = reverse_lazy("admin:index")
LOGOUT_REDIRECT_URL = reverse_lazy("admin:login")
ANONYMOUS_USER_NAME = None



APPS = [
    'starchat',
    "djstripe",
    'core',
    'page',
    'accounts',
    'authentic',
    
]   

UNFOLD_APPS = [
    "unfold",                  
    "unfold.contrib.filters",            
    "unfold.contrib.forms",               
    "unfold.contrib.import_export",   
    "unfold.contrib.simple_history",       
    "unfold.contrib.guardian",
]

INSTALLED = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
]

EXTRA_APPS = [
    'django_svg_image_form_field',
    "crispy_forms",
    "import_export",             
    "simple_history",  
    'rosetta',
    "guardian",    
    'ckeditor',
    'ckeditor_uploader',
    'colorfield',
    'robots',          
    'analytical',
]

SITE_ID = 1

INSTALLED_APPS = UNFOLD_APPS + APPS + INSTALLED + EXTRA_APPS

CRISPY_TEMPLATE_PACK = "unfold_crispy"
CRISPY_ALLOWED_TEMPLATE_PACKS = ["unfold_crispy"]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR / 'templates' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.site_config',
                'accounts.context_processors.active_plans',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
            'OPTIONS': {'timeout': 60},
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('DB_ENGINE'),
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'           
TIME_ZONE = 'America/Sao_Paulo'    
USE_I18N = True                   
USE_L10N = True                    
USE_TZ   = True

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

LANGUAGES = [
    ('pt-br', _('Português')),
    ('en',    _('English')),
]

ROSETTA_REQUIRES_LOGIN = True
ROSETTA_ACCESS_CONTROL_FUNCTION = None

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

WHITENOISE_MANIFEST_STRICT = False

COMPRESS_ENABLED = True
COMPRESS_OFFLINE = True
COMPRESS_ROOT = STATIC_ROOT
COMPRESS_OUTPUT_DIR = 'CACHE'

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

MEDIA_URL = '/media/'
MEDIA_ROOT  = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "guardian.backends.ObjectPermissionBackend",
)

from config.unfold.unfold import UNFOLD
UNFOLD = UNFOLD

CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_IMAGE_BACKEND = "pillow"

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'height': 300,
        'width': '100%',
        'extraPlugins': ','.join([
            'uploadimage',    # upload direto de imagem
            'image2',         # float / alinhamento horizontal
            'justify',        # alinhamento de parágrafos (texto)
            'stylescombo',    # dropdown de estilos (usaremos para vertical-align)
            'dialogadvtab',   # aba Avançado no diálogo de Imagem
            'autogrow',       # expande conforme o conteúdo
            'sourcearea',
        ]),
        'removePlugins': 'image',  # evita conflito com o plugin padrão
   
        'toolbar_Custom': [
            {'name': 'clipboard',   'items': ['Undo','Redo']},
            {'name': 'styles',      'items': ['Format','Styles','Font','FontSize']},
            {'name': 'colors',      'items': ['TextColor','BGColor']},
            {'name': 'basicstyles', 'items': ['Bold','Italic','Underline','Strike']},
            {'name': 'paragraph',   'items': [
                'NumberedList','BulletedList','-',
                'Outdent','Indent','-',
                'JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock'
            ]},
            {'name': 'insert',      'items': [
                'Image','Table','HorizontalRule','SpecialChar'
            ]},
            {'name': 'tools',       
             'items': [
                'Maximize',
                'Source'      # botão para alternar para o código-fonte
            ]},
        ],
        # classes para alinhar automaticamente as imagens
        'image2_alignClasses': [
            'image-align-left', 
            'image-align-center', 
            'image-align-right',
        ],

        # estilos customizados para vertical-align
        'stylesSet': [
            # mantém outros estilos existentes...
            { 'name': 'Alinhar Topo',    'element': 'img', 'attributes': {'style': 'vertical-align: top;'} },
            { 'name': 'Alinhar Meio',    'element': 'img', 'attributes': {'style': 'vertical-align: middle;'} },
            { 'name': 'Alinhar Inferior','element': 'img', 'attributes': {'style': 'vertical-align: bottom;'} },
        ],

        'autoGrow_minHeight': 200,
        'autoGrow_maxHeight': 600,
        'autoGrow_bottomSpace': 50,
    }
}

STRIPE_LIVE_SECRET_KEY    = os.getenv("STRIPE_LIVE_SECRET_KEY")
STRIPE_TEST_SECRET_KEY    = os.getenv("STRIPE_TEST_SECRET_KEY")
STRIPE_TEST_PUBLISHABLE_KEY = os.getenv("STRIPE_TEST_PUBLISHABLE_KEY")
STRIPE_LIVE_PUBLISHABLE_KEY = os.getenv("STRIPE_LIVE_PUBLISHABLE_KEY")
STRIPE_LIVE_MODE          = os.getenv("STRIPE_LIVE_MODE") == "True"
DJSTRIPE_WEBHOOK_SECRET   = os.getenv("DJSTRIPE_WEBHOOK_SECRET")
DJSTRIPE_USE_NATIVE_JSONFIELD = True
DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"

# Chaves finais usadas pelo projeto
if STRIPE_LIVE_MODE:
    STRIPE_SECRET_KEY       = STRIPE_LIVE_SECRET_KEY
    STRIPE_PUBLISHABLE_KEY  = STRIPE_LIVE_PUBLISHABLE_KEY
else:
    STRIPE_SECRET_KEY       = STRIPE_TEST_SECRET_KEY
    STRIPE_PUBLISHABLE_KEY  = STRIPE_TEST_PUBLISHABLE_KEY

# Validação básica (evita AttributeError e falhas silenciosas)
if not STRIPE_SECRET_KEY or not STRIPE_PUBLISHABLE_KEY:
    raise ImproperlyConfigured(
        "Faltam variáveis do Stripe. "
        "Defina TEST/LOCAL: STRIPE_TEST_SECRET_KEY, STRIPE_TEST_PUBLISHABLE_KEY "
        "ou LIVE: STRIPE_LIVE_SECRET_KEY, STRIPE_LIVE_PUBLISHABLE_KEY, e STRIPE_LIVE_MODE=True."
    )

CHATWOOT_URL = os.getenv("CHATWOOT_URL", "")
CHATWOOT_API_TOKEN = os.getenv("CHATWOOT_API_TOKEN", "")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    "loggers": {
        # Erros de request (500, exceções não tratadas)
        "django.request": {"handlers": ["console"], "level": "ERROR", "propagate": False},
        # Erros de template (ex.: AttributeError em template)
        "django.template": {"handlers": ["console"], "level": "ERROR", "propagate": False},
        # Log geral
        "": {"handlers": ["console"], "level": os.getenv("DJANGO_LOG_LEVEL", "INFO")},
    },
}

ROBOTS_USE_HOST = True
ROBOTS_CACHE_TIMEOUT = 60 * 60
ROBOTS_SITEMAP_URLS = [f'{DOMAIN}/sitemap.xml']

GOOGLE_ANALYTICS_GTAG_PROPERTY_ID = os.getenv("GOOGLE_ANALYTICS_GTAG_PROPERTY_ID")
INTERNAL_IPS = {"127.0.0.1"}
GOOGLE_ANALYTICS_INTERNAL_IPS = INTERNAL_IPS
