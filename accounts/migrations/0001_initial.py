# Generated by Django 4.2.23 on 2025-08-09 21:03

import colorfield.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_chatwoot_id', models.PositiveIntegerField(blank=True, help_text='ID do usuário no Chatwoot, se aplicável', null=True, verbose_name='Chatwoot User ID')),
                ('role', models.CharField(choices=[('administrator', 'Administrator'), ('agent', 'Agent')], default='agent', max_length=100, verbose_name='Tipo de usuário')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_customer_id', models.CharField(blank=True, help_text='ID do cliente no Stripe para cobranças', max_length=255, null=True, unique=True, verbose_name='Stripe Customer ID')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('extra_agents', models.PositiveIntegerField(default=0, verbose_name='Agentes extras')),
                ('extra_inboxes', models.PositiveIntegerField(default=0, verbose_name='Inboxes extras')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Conta',
                'verbose_name_plural': 'Contas',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('billing', 'Cobrança'), ('shipping', 'Entrega'), ('other', 'Outro')], default='billing', max_length=12, verbose_name='Tipo')),
                ('is_default', models.BooleanField(default=False, verbose_name='Padrão')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Nome/Empresa')),
                ('line1', models.CharField(max_length=255, verbose_name='Endereço (linha 1)')),
                ('number', models.CharField(blank=True, max_length=30, verbose_name='Número')),
                ('line2', models.CharField(blank=True, max_length=255, verbose_name='Complemento')),
                ('neighborhood', models.CharField(blank=True, max_length=100, verbose_name='Bairro')),
                ('city', models.CharField(max_length=100, verbose_name='Cidade')),
                ('state', models.CharField(blank=True, max_length=100, verbose_name='Estado/Província')),
                ('postal_code', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9\\- ]{3,12}$', 'Código postal inválido')], verbose_name='CEP/Código Postal')),
                ('country', django_countries.fields.CountryField(default='BR', max_length=2, verbose_name='País')),
                ('phone', models.CharField(blank=True, max_length=30, verbose_name='Telefone')),
                ('tax_id', models.CharField(blank=True, max_length=32, verbose_name='CNPJ/CPF')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Endereço',
                'verbose_name_plural': 'Endereços',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='Nome do plano', max_length=100, verbose_name='Nome')),
                ('description', models.TextField(blank=True, help_text='Descrição detalhada do plano', verbose_name='Descrição')),
                ('requires_payment', models.BooleanField(default=True, help_text='Desmarque para planos gratuitos, sem cobrança automática', verbose_name='Requer Cobrança')),
                ('stripe_product_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Product ID')),
                ('billing_monthly_price_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Monthly Price ID')),
                ('billing_yearly_price_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Yearly Price ID')),
                ('billing_extra_agent_price_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Extra Agent Price ID')),
                ('billing_extra_inbox_price_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Extra Inbox Price ID')),
                ('included_agents', models.PositiveIntegerField(default=0, help_text='Quantidade de agentes inclusos no plano', verbose_name='Agentes Incluídos')),
                ('extra_agent_price', models.DecimalField(decimal_places=2, default=0, help_text='Valor cobrado por agente além do inclusos', max_digits=8, verbose_name='Preço por Agente Extra')),
                ('included_inboxes', models.PositiveIntegerField(default=0, help_text='Quantidade de inboxes inclusas no plano', verbose_name='Inboxes Incluídas')),
                ('extra_inbox_price', models.DecimalField(decimal_places=2, default=0, help_text='Valor cobrado por inbox além das inclusas', max_digits=8, verbose_name='Preço por Inbox Extra')),
                ('monthly_price', models.DecimalField(decimal_places=2, help_text='Valor da assinatura mensal', max_digits=8, verbose_name='Preço Mensal')),
                ('yearly_price', models.DecimalField(decimal_places=2, help_text='Valor da assinatura anual (geralmente com desconto)', max_digits=8, verbose_name='Preço Anual')),
                ('is_active', models.BooleanField(default=True, help_text='Apenas planos ativos são oferecidos no front-end', verbose_name='Ativo')),
                ('is_plan_staff', models.BooleanField(default=False, help_text='Marque se este plano é um plano de equipe', verbose_name='Plano de Equipe')),
                ('is_favorite', models.BooleanField(default=False, help_text='Marque se este plano é um plano favorito', verbose_name='Favorito')),
                ('hex_color', colorfield.fields.ColorField(blank=True, default=None, help_text='Código de cor em hexadecimal (ex: #FF0000)', image_field=None, max_length=7, null=True, samples=None, verbose_name='Cor')),
            ],
            options={
                'verbose_name': 'Plano',
                'verbose_name_plural': 'Planos',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_chatwoot_id', models.PositiveIntegerField(blank=True, help_text='ID do usuário no Chatwoot, se aplicável', null=True, verbose_name='Chatwoot User ID')),
                ('role', models.CharField(choices=[('administrator', 'Administrator'), ('agent', 'Agent')], default='agent', max_length=100, verbose_name='Tipo de usuário')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('account', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='accounts.account')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical user',
                'verbose_name_plural': 'historical users',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPlan',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='Nome do plano', max_length=100, verbose_name='Nome')),
                ('description', models.TextField(blank=True, help_text='Descrição detalhada do plano', verbose_name='Descrição')),
                ('requires_payment', models.BooleanField(default=True, help_text='Desmarque para planos gratuitos, sem cobrança automática', verbose_name='Requer Cobrança')),
                ('stripe_product_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Product ID')),
                ('billing_monthly_price_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Monthly Price ID')),
                ('billing_yearly_price_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Yearly Price ID')),
                ('billing_extra_agent_price_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Extra Agent Price ID')),
                ('billing_extra_inbox_price_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Extra Inbox Price ID')),
                ('included_agents', models.PositiveIntegerField(default=0, help_text='Quantidade de agentes inclusos no plano', verbose_name='Agentes Incluídos')),
                ('extra_agent_price', models.DecimalField(decimal_places=2, default=0, help_text='Valor cobrado por agente além do inclusos', max_digits=8, verbose_name='Preço por Agente Extra')),
                ('included_inboxes', models.PositiveIntegerField(default=0, help_text='Quantidade de inboxes inclusas no plano', verbose_name='Inboxes Incluídas')),
                ('extra_inbox_price', models.DecimalField(decimal_places=2, default=0, help_text='Valor cobrado por inbox além das inclusas', max_digits=8, verbose_name='Preço por Inbox Extra')),
                ('monthly_price', models.DecimalField(decimal_places=2, help_text='Valor da assinatura mensal', max_digits=8, verbose_name='Preço Mensal')),
                ('yearly_price', models.DecimalField(decimal_places=2, help_text='Valor da assinatura anual (geralmente com desconto)', max_digits=8, verbose_name='Preço Anual')),
                ('is_active', models.BooleanField(default=True, help_text='Apenas planos ativos são oferecidos no front-end', verbose_name='Ativo')),
                ('is_plan_staff', models.BooleanField(default=False, help_text='Marque se este plano é um plano de equipe', verbose_name='Plano de Equipe')),
                ('is_favorite', models.BooleanField(default=False, help_text='Marque se este plano é um plano favorito', verbose_name='Favorito')),
                ('hex_color', colorfield.fields.ColorField(blank=True, default=None, help_text='Código de cor em hexadecimal (ex: #FF0000)', image_field=None, max_length=7, null=True, samples=None, verbose_name='Cor')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Plano',
                'verbose_name_plural': 'historical Planos',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCompany',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome')),
                ('cnpj', models.CharField(db_index=True, max_length=18, verbose_name='CNPJ')),
                ('billing_address', models.JSONField(blank=True, help_text='Endereço de cobrança da empresa', null=True, verbose_name='Endereço de cobrança')),
                ('company_type', models.CharField(choices=[('retail', 'Varejo'), ('technology', 'Tecnologia'), ('industry', 'Indústria'), ('health', 'Saúde'), ('educational', 'Educacional'), ('financial', 'Financeiro'), ('civil_construction', 'Construção Civil'), ('services', 'Serviços'), ('commerce', 'Comércio'), ('agriculture', 'Agricultura'), ('tourism', 'Turismo'), ('food', 'Alimentos'), ('automotive', 'Automotivo'), ('energy', 'Energia'), ('logistics', 'Logística'), ('others', 'Outros')], max_length=20, verbose_name='Tipo de empresa')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('account', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='accounts.account', verbose_name='Conta')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical company',
                'verbose_name_plural': 'historical companys',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAccount',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('stripe_customer_id', models.CharField(blank=True, db_index=True, help_text='ID do cliente no Stripe para cobranças', max_length=255, null=True, verbose_name='Stripe Customer ID')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone')),
                ('email', models.EmailField(db_index=True, max_length=255, verbose_name='Email')),
                ('extra_agents', models.PositiveIntegerField(default=0, verbose_name='Agentes extras')),
                ('extra_inboxes', models.PositiveIntegerField(default=0, verbose_name='Inboxes extras')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Atualizado em')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('address', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='accounts.address', verbose_name='Endereço')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('plan', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='accounts.plan', verbose_name='Plano')),
            ],
            options={
                'verbose_name': 'historical Conta',
                'verbose_name_plural': 'historical Contas',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome')),
                ('cnpj', models.CharField(max_length=18, unique=True, verbose_name='CNPJ')),
                ('billing_address', models.JSONField(blank=True, help_text='Endereço de cobrança da empresa', null=True, verbose_name='Endereço de cobrança')),
                ('company_type', models.CharField(choices=[('retail', 'Varejo'), ('technology', 'Tecnologia'), ('industry', 'Indústria'), ('health', 'Saúde'), ('educational', 'Educacional'), ('financial', 'Financeiro'), ('civil_construction', 'Construção Civil'), ('services', 'Serviços'), ('commerce', 'Comércio'), ('agriculture', 'Agricultura'), ('tourism', 'Turismo'), ('food', 'Alimentos'), ('automotive', 'Automotivo'), ('energy', 'Energia'), ('logistics', 'Logística'), ('others', 'Outros')], max_length=20, verbose_name='Tipo de empresa')),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='company', to='accounts.account', verbose_name='Conta')),
            ],
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('type',), name='unique_default_address_per_type'),
        ),
        migrations.AddField(
            model_name='account',
            name='address',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.address', verbose_name='Endereço'),
        ),
        migrations.AddField(
            model_name='account',
            name='plan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='accounts.plan', verbose_name='Plano'),
        ),
        migrations.AddField(
            model_name='user',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='accounts.account'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
