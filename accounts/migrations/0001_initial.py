# Generated by Django 5.2.4 on 2025-07-20 01:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Ativo'), ('inactive', 'Inativo')], max_length=20, verbose_name='Status')),
                ('start_date', models.DateTimeField(verbose_name='Data de início')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Data de fim')),
                ('trial_end_date', models.DateTimeField(blank=True, null=True, verbose_name='Data de fim do trial')),
                ('payment_method', models.CharField(max_length=50, verbose_name='Método de pagamento')),
                ('customer_id_payment', models.CharField(max_length=255, verbose_name='ID do cliente no pagamento')),
                ('payment_status', models.CharField(max_length=50, verbose_name='Status do pagamento')),
                ('last_payment_date', models.DateTimeField(blank=True, null=True, verbose_name='Data da última cobrança')),
                ('next_payment_date', models.DateTimeField(blank=True, null=True, verbose_name='Data da próxima cobrança')),
                ('failed_payments', models.IntegerField(default=0, verbose_name='Pagamentos falhados')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
            ],
            options={
                'verbose_name': 'Conta',
                'verbose_name_plural': 'Contas',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Price')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='accounts.account')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('cnpj', models.CharField(max_length=18, unique=True, verbose_name='CNPJ')),
                ('billing_address', models.JSONField(verbose_name='Endereço de cobrança')),
                ('company_type', models.CharField(max_length=50, verbose_name='Tipo de empresa')),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='company', to='accounts.account', verbose_name='Conta')),
            ],
        ),
        migrations.AddField(
            model_name='account',
            name='plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.plan', verbose_name='Plano'),
        ),
    ]
